AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'An Alexa skill for Tesla API'


###
### Template input parameters
###

Parameters:
  pSkillId:
    Type: String
    Description: ID of the Alexa Skill we will hook with
  pTeslaAPIClientId:
    Type: String
    Description: The Tesla API Client ID (https://pastebin.com/pS7Z6yyP)
    Default: "81527cff06843c8634fdc09e8ac0abefb46ac849f38fe1e431c2ef2106796384"
  pTeslaAPIClientSecret:
    Type: String
    Description: The Tesla API Client Secret (https://pastebin.com/pS7Z6yyP)
    Default: "c7257eb71a564034f9419ee651c7d0e5f7aa6bfbd18bafb5c5c033b093bb2fa3"

###
### Template Mappings
###

Mappings:
  LambdaRequestsLib:
    ap-northeast-1:
      "requests": "arn:aws:lambda:ap-northeast-1:249908578461:layer:AWSLambda-Python-AWS-SDK:4"
    us-east-1:
      "requests": "arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python-AWS-SDK:4"
    ap-southeast-1:
      "requests": "arn:aws:lambda:ap-southeast-1:468957933125:layer:AWSLambda-Python-AWS-SDK:4"
    eu-west-1:
      "requests": "arn:aws:lambda:eu-west-1:399891621064:layer:AWSLambda-Python-AWS-SDK:4"
    us-west-1:
      "requests": "arn:aws:lambda:us-west-1:325793726646:layer:AWSLambda-Python-AWS-SDK:4"
    ap-east-1:
      "requests": "arn:aws:lambda:ap-east-1:118857876118:layer:AWSLambda-Python-AWS-SDK:4"
    ap-northeast-2:
      "requests": "arn:aws:lambda:ap-northeast-2:296580773974:layer:AWSLambda-Python-AWS-SDK:4"
    ap-northeast-3:
      "requests": "arn:aws:lambda:ap-northeast-3:961244031340:layer:AWSLambda-Python-AWS-SDK:4"
    ap-south-1:
      "requests": "arn:aws:lambda:ap-south-1:631267018583:layer:AWSLambda-Python-AWS-SDK:4"
    ap-southeast-2:
      "requests": "arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python-AWS-SDK:4"
    ca-central-1:
      "requests": "arn:aws:lambda:ca-central-1:778625758767:layer:AWSLambda-Python-AWS-SDK:4"
    eu-central-1:
      "requests": "arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python-AWS-SDK:4"
    eu-north-1:
      "requests": "arn:aws:lambda:eu-north-1:642425348156:layer:AWSLambda-Python-AWS-SDK:4"
    eu-west-2:
      "requests": "arn:aws:lambda:eu-west-2:142628438157:layer:AWSLambda-Python-AWS-SDK:4"
    eu-west-3:
      "requests": "arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python-AWS-SDK:4"
    sa-east-1:
      "requests": "arn:aws:lambda:sa-east-1:640010853179:layer:AWSLambda-Python-AWS-SDK:4"
    us-east-2:
      "requests": "arn:aws:lambda:us-east-2:259788987135:layer:AWSLambda-Python-AWS-SDK:4"
    us-west-2:
      "requests": "arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python-AWS-SDK:5"
    cn-north-1:
      "requests": "arn:aws-cn:lambda:cn-north-1:683298794825:layer:AWSLambda-Python-AWS-SDK:4"
    cn-northwest-1:
      "requests": "arn:aws-cn:lambda:cn-northwest-1:382066503313:layer:AWSLambda-Python-AWS-SDK:4"
    us-gov-west:
      "requests": "arn:aws-us-gov:lambda:us-gov-west-1:556739011827:layer:AWSLambda-Python-AWS-SDK:4"
    us-gov-east:
      "requests": "arn:aws-us-gov:lambda:us-gov-east-1:138526772879:layer:AWSLambda-Python-AWS-SDK:4"

###
### Template Resources
###

Resources:

  # Role for the Alexa Lambda Function
  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:*'
              - Sid: CloudWatchPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: "*"
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:*:*:parameter/${AWS::StackName}-*'
              - Sid: DynamoDB
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !Sub 'arn:${AWS::Partition}:dynamodb:*:*:table:${AWS::StackName}-users'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Layers:
        - !FindInMap [LambdaRequestsLib, !Ref "AWS::Region", requests]
  
  # The Alexa Lambda function
  rAlexaLambdaFunction:
    Type: 'AWS::Serverless::Function'
    DependsOn: rLambdaRole
    Properties:
      Role: !GetAtt 'rLambdaRole.Arn'
      FunctionName: !Sub '${AWS::StackName}-AlexaLambdaFunction'
      Runtime: python3.7
      Timeout: 60
      Handler: lambda_function.lambda_handler
      CodeUri: ./alexa
      EventSource:
        Type: AlexaSkill
        Properties: 
          SkillId: !Ref pSkillId
      Layers:
        - !FindInMap [LambdaRequestsLib, !Ref "AWS::Region", requests]
      Environment:
        Variables:
          usersTable: !Ref rUsersTable

  # Users table
  rUsersTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "userId"
          AttributeType: "S"
        - 
          AttributeName: "activationCode"
          AttributeType: "S"
        - 
          AttributeName: "accessToken"
          AttributeType: "S"
        - 
          AttributeName: "refreshToken"
          AttributeType: "S"
        - 
          AttributeName: "status"
          AttributeType: "S"
        -
          AttributeName: "expires"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: userId
          KeyType: HASH
        - 
          AttributeName: activationCode
          KeyType: HASH
      SSESpecification: 
        - KMSMasterKeyId: !GetAtt rKMSKey.arn
          SSEEnabled: true
          SSEType: KMS
      TableName: !Sub '${AWS::StackName}-users'

  # KMS key to encrypt the data in the users table
  rKMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: !Sub 'Key is used to encrypt ${AWS::StackName}-users'
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow # Administrator
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root' #yuk
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow # Lambda function access through DynamoDB
          Principal:
            AWS: !GetAtt rLambdaRole.arn
          Action:
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey*'
          - 'kms:CreateGrant'
          - 'kms:ListGrants'
          - 'kms:DescribeKey'
          Resource: '*'
          Condition:
            StringLike:
              'kms:ViaService' : 'dynamodb.*.amazonaws.com'
  
  # API Gateway used for signup
  rAPIgw:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"

  # This literally just shows the form that it'll then POST back
  rGetSetupLambda: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./getSetup
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Runtime: python3.7
      Events:
        getSetup:
          Type: Api
          Properties:
            RestApiId: !Ref rAPIgw
            Path: /
            Method: GET
  
  # This attaches uses the activation code to marry up to an alexa user, but then uses the un/pw pair to create an access token
  rPostSetupLambda: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./postSetup
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Runtime: python3.7
      Environment:
        Variables:
          usersTable: !Ref rUsersTable
          teslaAPIClientId: !Ref pTeslaAPIClientId
          teslaAPIClientSecret: !Ref pTeslaAPIClientSecret
      Events:
        getAccount:
          Type: Api
          Properties:
            RestApiId: !Ref rAPIgw
            Path: /
            Method: POST
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
            Resource: !GetAtt rUsersTable.Arn

Outputs:
  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${rAPIgw}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  AlexaLambdaARN:
    Description: "The lambda your alexa skill should be pointed at"
    Value: !Ref rAlexaLambdaFunction